{
	"fileTypes": [
		"ola"
	],
	"name": "ola",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#control"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#number"
		},
		{
            "include": "#string"
        },
		{
			"include": "#type"
		},
		{
            "include": "#global"
        },
		{
			"include": "#declaration"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#punctuation"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"include": "#comment-line"
				},
				{
					"include": "#comment-block"
				}
			]
		},
		"comment-line": {
			"match": "(?<!tp:)//.*?$",
			"name": "comment.line.ola"
		},
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.ola"
		},
		"operator": {
			"patterns": [
				{
					"include": "#operator-logic"
				},
				{
                    "include": "#operator-mapping"
                },
				{
					"include": "#operator-arithmetic"
				},
				{
					"include": "#operator-binary"
				},
				{
					"include": "#operator-assignment"
				}
			]
		},
		"operator-logic": {
			"match": "(==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?)",
			"name": "keyword.operator.logic.ola"
		},
		"operator-mapping": {
            "match": "(=>)",
            "name": "keyword.operator.mapping.ola"
        },
		"operator-arithmetic": {
			"match": "(\\+|\\-|\\/|\\*)",
			"name": "keyword.operator.arithmetic.ola"
		},
		"operator-binary": {
			"match": "(\\^|\\&|\\||<<|>>)",
			"name": "keyword.operator.binary.ola"
		},
		"operator-assignment": {
			"match": "(\\:?=)",
			"name": "keyword.operator.assignment.ola"
		},
		"control": {
			"patterns": [
				{
					"include": "#control-flow"
				},
				{
					"include": "#control-import"
				},
				{
                    "include": "#control-underscore"
                }
			]
		},
		"control-flow": {
			"match": "\\b(if|else|for|while|do|break|continue|return?)\\b",
			"name": "keyword.control.flow.ola"
		},
		"control-import": {
			"match": "\\b(import)\\b",
			"name": "keyword.control.import.ola"
		},
		"control-underscore": {
            "match": "\\b(_)\\b",
            "name": "constant.other.underscore.ola"
        },
		"constant": {
			"patterns": [
				{
					"include": "#constant-boolean"
				}
			]
		},
		"constant-boolean": {
			"match": "\\b(true|false)\\b",
			"name": "constant.language.boolean.ola"
		},
		"number": {
			"patterns": [
				{
					"include": "#number-decimal"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-address"
				},
				{
					"include": "#number-hash"
				}

			]
		},
		"number-decimal": {
			"match": "\\b(\\d+(\\.\\d+)?)\\b",
			"name": "constant.numeric.decimal.ola"
		},
		"number-hex": {
			"match": "\\b(0[xX][a-fA-F0-9]+)\\b",
			"name": "constant.numeric.hexadecimal.ola"
		},
		"number-address": {
			"match": "\\b(0[xX][a-fA-F0-9]+)address\\b",
			"name": "constant.numeric.hexadecimal.ola"
		},
		"number-hash": {
			"match": "\\b(0[xX][a-fA-F0-9]+)hash\\b",
			"name": "constant.numeric.hexadecimal.ola"
		},
		"string": {
            "patterns": [
                {
                    "match": "\\\".*?\\\"",
                    "name": "string.quoted.double.ola"
                },
                {
                    "match": "\\'.*?\\'",
                    "name": "string.quoted.single.ola"
                }
            ]
        },
		"type": {
			"patterns": [
				{
					"include": "#type-primitive"
				}
			]
		},
		"type-primitive": {
            "match": "\\b(address|string\\d*|fields\\d*|field\\d*|u\\d*|bool|hash\\d*)\\b",
            "name": "support.type.primitive.ola"
        },
		"global": {
            "patterns": [
                {
                    "include": "#global-functions"
                }
            ]
        },
		"global-functions": {
            "patterns": [
                {
                    "match": "\\b(assert)\\b",
                    "name": "keyword.control.exceptions.ola"
                },
                {
                    "match": "\\b(caller_address|origin_address|code_address|current_address)\\b",
                    "name": "keyword.control.contract.ola"
                },
                {
                    "match": "\\b(poseidon_hash|fields_concat)\\b",
                    "name": "support.function.fields.ola"
                },
				{
                    "match": "\\b(u32_sqrt|u32_array_sort)\\b",
                    "name": "support.function.prophet.ola"
                },
                {
                    "match": "\\b(chain_id|block_num)\\b",
                    "name": "variable.language.transaction.ola"
                }
            ]
        },
		"declaration": {
			"patterns": [
				{
					"include": "#declaration-contract"
				},
				{
					"include": "#declaration-struct"
				},
				{
					"include": "#declaration-enum"
				},
				{
					"include": "#declaration-function"
				},
				{
                    "include": "#declaration-mapping"
                }
			]
		},
		"declaration-contract": {
			"patterns": [
				{
					"match": "\\b(contract)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.contract.ola"
						},
						"3": {
							"name": "entity.name.type.contract.ola"
						}
					}
				}
			]
		},
		"declaration-struct": {
			"match": "\\b(struct)(\\s+([A-Za-z_]\\w*))?\\b",
			"captures": {
				"1": {
					"name": "storage.type.struct.ola"
				},
				"3": {
					"name": "entity.name.type.struct.ola"
				}
			}
		},
		"declaration-enum": {
			"match": "\\b(enum)(\\s+([A-Za-z_]\\w*))?\\b",
			"captures": {
				"1": {
					"name": "storage.type.enum.ola"
				},
				"3": {
					"name": "entity.name.type.enum.ola"
				}
			}
		},
		"declaration-function": {
			"patterns": [
				{
					"match": "\\b(fn)\\s+([A-Za-z_]\\w*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.ola"
						},
						"2": {
							"name": "entity.name.function.ola"
						}
					}
				}
			]
		},
		"declaration-mapping": {
            "match": "\\b(mapping)\\b",
            "name": "storage.type.mapping.ola"
        },
		"function-call": {
			"match": "\\b([A-Za-z_]\\w*)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.ola"
				}
			}
		},
		"punctuation": {
			"patterns": [
				{
					"match": ";",
					"name": "punctuation.terminator.statement.ola"
				},
				{
					"match": "\\.",
					"name": "punctuation.accessor.ola"
				},
				{
					"match": ",",
					"name": "punctuation.separator.ola"
				}
			]
		}
	},
	"scopeName": "source.ola"
}